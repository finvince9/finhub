local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/NiceBBMBThai12/NBTScript/main/UI%20LUA%20%3A%20Porn%20HUB"))()
local a = library:NewWindow("NBT","HUB") 
local d = a:NewSection("Credit")
local b = a:NewSection("Main")
local c = a:NewSection("Auto")

d:Button("Copy Link YouTube", function()
    setclipboard("http://youtube.com/@NiceBBSBNBT?sub_confirmation=1")
    for i, newText in ipairs(newTexts) do
        textLabels[i]:Refresh(newText)
    end
    task.wait(3)
    for i, originalText in ipairs(originalTexts) do
        textLabels[i]:Refresh(originalText)
    end
end)
d:Button("Copy Link Discord", function()
setclipboard("https://discord.gg/6D6yg4qZMz")
    for i, newText in ipairs(newTexts) do
        textLabels[i]:Refresh(newText)
    end
    task.wait(3)
    for i, originalText in ipairs(originalTexts) do
        textLabels[i]:Refresh(originalText)
    end
end)

b:Button("NoCooldowm Prompt", function() 
    local function promptnocooldown()
        game:GetService("ProximityPromptService").PromptButtonHoldBegan:Connect(function(prompt)
            prompt.HoldDuration = 0
        end)
    end
    promptnocooldown()
end)

b:h1("One Hit [âŒ]")

b:h1("Dead Aura [âŒ]")

b:h1("Teleport Dun")
b:Button("Reset Game",function()
    local JoinTable1 = {
        ["Location"] = "Frosty Hills",
        ["GroupType"] = "Public",
        ["Difficult"] = "Hard",
        ["Invasions"] = true
    }
    game:GetService("ReplicatedStorage").Events.CreateDungeonGroup:FireServer(JoinTable1)
    game:GetService("ReplicatedStorage").Events.StartDungeonGroup:FireServer()
end)
b:Button("Return Lobby [No Chest]",function()
        local cloneref = cloneref or function(o) return o end
    TeleportService = cloneref(game:GetService("TeleportService"))
    local TeleportService = TeleportService
    TeleportService:Teleport(112315720097464)
end)

c:h1("Auto Join")
c:Toggle("Auto Join", function(a)
    autojoindungeon = a
    while autojoindungeon do
        task.wait()
        pcall(function()
            local JoinTable1 = {
                ["Location"] = "Frosty Hills",
                ["GroupType"] = "Public",
                ["Difficult"] = "Hard",
                ["Invasions"] = true
            }
            game:GetService("ReplicatedStorage").Events.CreateDungeonGroup:FireServer(JoinTable1)
            task.wait(1)
            game:GetService("ReplicatedStorage").Events.StartDungeonGroup:FireServer()
        end)
    end
end)

c:h1("Auto Attack")

c:Toggle("Auto Attack", function(state)
    autoattack = state
    while autoattack do 
        task.wait()
        pcall(function()
            game:GetService("ReplicatedStorage").Events.Combat:FireServer("Attack")
        end)
    end
end)

c:Toggle("Auto Skill", function(state)
    autoskill = state
    while autoskill do 
        task.wait()
        pcall(function()
            local VirtualInputManager = game:GetService("VirtualInputManager")
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.One, false, game)
            task.wait(0.1)
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Two, false, game)
            task.wait(0.1)
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Three, false, game)
        end)
    end
end)

c:Toggle("Auto Block", function(state)
    autoblock = state
    while autoblock do 
        task.wait()
        pcall(function()
            game:GetService("ReplicatedStorage").Events.Blocking:InvokeServer("Blocking")
            game:GetService("ReplicatedStorage").UIEvents.BlockingToggle:Fire(true)
        end)
    end
    
    if not autoblock then
        game:GetService("ReplicatedStorage").Events.Blocking:InvokeServer("UnBlocking")
        game:GetService("ReplicatedStorage").UIEvents.BlockingToggle:Fire(false)
    end
end)

local guiservice = game:GetService("GuiService")
local virtualInputManager = game:GetService("VirtualInputManager")
local gui = game:GetService("CoreGui")
local function toggleAutoFarmButton()
    local screenGui = gui:FindFirstChild("ScreenGui")
    if screenGui then
        local autofarmButton = screenGui:FindFirstChild("AutoFarmButton")
        if autofarmButton then
            autofarmButton.Visible = not autofarmButton.Visible
        end
    end
end

local guiservice = game:GetService("GuiService")
local virtualInputManager = game:GetService("VirtualInputManager")
local gui = game:GetService("CoreGui")
local function toggleAutoFarmButton()
    local screenGui = gui:FindFirstChild("ScreenGui")
    if screenGui then
        local mainWindow = screenGui:FindFirstChild("MainWindow")
        if mainWindow then
            local pages = mainWindow:FindFirstChild("Pages")
            if pages then
                local auto = pages:FindFirstChild("Auto")
                if auto then
                    local newToggle = auto:FindFirstChild("NewToggle")
                    if newToggle and newToggle:IsA("TextButton") and newToggle.Visible and newToggle.Text == "Auto Farm" then
                        task.wait(0.001)
                        guiservice.SelectedCoreObject = newToggle
                        virtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                        virtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                    end
                end
            end
        end
    end
end
 
local TweenService = game:GetService("TweenService")

local HealthManager = {
    percentageThreshold = 0.50,
    isEnabled = false,
    originalPosition = nil,
    campfirePosition = CFrame.new(104, 37, -211),
    healingPosition = CFrame.new(116, 37, -212),
    healingAttempts = 10,
    healingDelay = 0.2,
    tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear)
}

local c = c 
c:h1("Health")

c:Slider("Set Percent HP", 1, 100, function(value)
    HealthManager.percentageThreshold = value / 100
end)

local function shouldHeal(humanoid)
    return (humanoid.Health / humanoid.MaxHealth) < HealthManager.percentageThreshold
end

local function isFullHealth(humanoid)
    return humanoid.Health >= humanoid.MaxHealth
end

local function tweenToPosition(rootPart, targetCFrame)
    local tween = TweenService:Create(rootPart, HealthManager.tweenInfo, {CFrame = targetCFrame})
    tween:Play()
    tween.Completed:Wait()
end

local function performHealing(rootPart)
    for i = 1, HealthManager.healingAttempts do
        tweenToPosition(rootPart, HealthManager.healingPosition)
        task.wait(HealthManager.healingDelay)
        tweenToPosition(rootPart, HealthManager.campfirePosition)
    end
end

c:Toggle("Auto Health", function(enabled)
    HealthManager.isEnabled = enabled
    
    task.spawn(function()
        while HealthManager.isEnabled do
            task.wait()
            pcall(function()
                local player = game.Players.LocalPlayer
                local character = player.Character
                if not character then return end
                
                local humanoid = character:FindFirstChild("Humanoid")
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if not (humanoid and rootPart) then return end
                
                local campfire = workspace:FindFirstChild("Tower")
                if not (campfire and 
                       campfire:FindFirstChild("StartRoom") and 
                       campfire.StartRoom:FindFirstChild("Campfire") and 
                       campfire.StartRoom.Campfire:FindFirstChild("Hitbox")) then
                    return
                end
                
                if shouldHeal(humanoid) then
                    HealthManager.originalPosition = HealthManager.originalPosition or rootPart.CFrame
                    performHealing(rootPart)
                elseif isFullHealth(humanoid) and HealthManager.originalPosition then
                    tweenToPosition(rootPart, HealthManager.originalPosition)
                    HealthManager.originalPosition = nil
                end
            end)
        end
    end)
end)

_G.AutoJumpEnabled = true

c:Toggle("Auto Jump", function(enabled)
    _G.AutoJumpEnabled = enabled
    
    if enabled then
        spawn(function()
            while _G.AutoJumpEnabled do
                _G.AntiSitConnection = game:GetService("RunService").Heartbeat:Connect(function()
                    local character = game.Players.LocalPlayer.Character
                    if character and character:FindFirstChild("Humanoid") then
                        if character.Humanoid.Sit then
                            character.Humanoid.Sit = false
                        end
                    end
                end)
                
                wait(5)
                
                if _G.AntiSitConnection then
                    _G.AntiSitConnection:Disconnect()
                    _G.AntiSitConnection = nil
                end
                
                wait(5)
            end
        end)
    else
        if _G.AntiSitConnection then
            _G.AntiSitConnection:Disconnect()
            _G.AntiSitConnection = nil
        end
    end
end)

spawn(function()
    wait(1)
    if c and c.Toggle then
        c:Toggle("Auto Jump", true)
    end
end)

local AutoFarm = {
    distance = {x = 0, y = 25, z = 0},
    enabled = false,
    targetMonster = nil,
    buildPart = nil,
    pausedForHealing = false
}

local c = c
c:h1("Auto Farm")

c:Slider("Distance X", -50, 50, function(value)
    AutoFarm.distance.x = value
end)

c:Slider("Distance Y", -50, 50, function(value)
    AutoFarm.distance.y = value
end)

c:Slider("Distance Z", -50, 50, function(value)
    AutoFarm.distance.z = value
end)

local function createBuildPart()
    local part = Instance.new("Part")
    part.Size = Vector3.new(1, 0, 1)
    part.Anchored = true
    part.CanCollide = false
    part.Transparency = 1
    part.Parent = game.Workspace
    local player = game:GetService("Players").LocalPlayer
    part.CFrame = player.Character.HumanoidRootPart.CFrame
    return part
end

local function handleMonster(monster)
    if AutoFarm.pausedForHealing then return false end
    
    local humanoid = monster:FindFirstChild("Humanoid")
    if not humanoid or humanoid.Health <= 0 then return false end
    
    local player = game:GetService("Players").LocalPlayer
    local rootPart = player.Character.HumanoidRootPart
    rootPart.Anchored = false
    rootPart.CFrame = CFrame.new(
        monster.HumanoidRootPart.Position + Vector3.new(
            AutoFarm.distance.x,
            AutoFarm.distance.y,
            AutoFarm.distance.z
        ),
        monster.HumanoidRootPart.Position
    )
    return humanoid.Health > 0
end

c:Toggle("Auto Farm", function(enabled)
    AutoFarm.enabled = enabled
    AutoFarm.targetMonster = nil
    
    if enabled then
        AutoFarm.buildPart = createBuildPart()
        task.spawn(function()
            while AutoFarm.enabled do
                task.wait()
                pcall(function()
                    for _, monster in pairs(game:GetService("Workspace").Characters:GetChildren()) do
                        if not AutoFarm.enabled then break end
                        if monster:IsA("Model") 
                            and monster:FindFirstChild("HumanoidRootPart") 
                            and monster:FindFirstChild("Humanoid")
                            and not game:GetService("Players"):FindFirstChild(monster.Name) then
                            AutoFarm.targetMonster = monster
                            while handleMonster(monster) and AutoFarm.enabled do
                                task.wait()
                            end
                        end
                    end
                end)
            end
            if AutoFarm.buildPart then
                local player = game:GetService("Players").LocalPlayer
                player.Character.HumanoidRootPart.Anchored = false
                player.Character.HumanoidRootPart.CFrame = AutoFarm.buildPart.CFrame
                AutoFarm.buildPart:Destroy()
                AutoFarm.buildPart = nil
            end
        end)
    end
end)

_G.pauseAutoFarm = function()
    AutoFarm.pausedForHealing = true
end

_G.resumeAutoFarm = function()
    AutoFarm.pausedForHealing = false
end
 
local autoChestEnabled = false
local autoEXPBookEnabled = false
local searchRange = 500
c:h1("Auto Grab")
 
local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local workspace = game:GetService("Workspace")
 
c:Toggle("Auto Chest", function(state)
    autoChestEnabled = state
    if not autoChestEnabled then return end
    task.spawn(function()
        while autoChestEnabled do
            local tower = workspace:FindFirstChild("Tower")
            if tower then
                local closestChest = nil
                local closestDistance = math.huge
                for i = 1, 20 do
                    local wave = tower:FindFirstChild(tostring(i))
                    if wave and wave:IsA("Model") then
                        local chest = wave:FindFirstChild("Chest")
                        if chest and chest:IsA("Model") then
                            local distance = (hrp.Position - chest:GetPivot().Position).Magnitude
 
                            if distance < searchRange and distance < closestDistance then
                                if not chest:FindFirstChild("ForceField") and chest:FindFirstChild("ProximityPrompt") then
                                    closestChest = chest
                                    closestDistance = distance
                                end
                            end
                        end
                    end
                end
                if closestChest then
                    hrp.CFrame = closestChest:GetPivot() + Vector3.new(0, 3, 0)
                    task.wait(0.5)
                    local proximityPrompt = closestChest:FindFirstChild("ProximityPrompt")
                    if proximityPrompt then
                        fireproximityprompt(proximityPrompt)
                    end
                end
            end
            task.wait(1)
        end
    end)
end)
 
c:Toggle("Auto EXPBook", function(state)
    autoEXPBookEnabled = state
    if not autoEXPBookEnabled then return end
    task.spawn(function()
        while autoEXPBookEnabled do
            local tower = workspace:FindFirstChild("Tower")
            if tower then
                local closestEXPBook = nil
                local closestDistance = math.huge
                for i = 1, 20 do
                    local wave = tower:FindFirstChild(tostring(i))
                    if wave and wave:IsA("Model") then
                        local expBook = wave:FindFirstChild("EXPBook")
                        if expBook and expBook:IsA("Model") then
                            local distance = (hrp.Position - expBook:GetPivot().Position).Magnitude
                            if distance < searchRange and distance < closestDistance then
                                local proximityPrompt = expBook:FindFirstChild("ProximityPrompt")
                                if proximityPrompt and proximityPrompt.Enabled then
                                    closestEXPBook = expBook
                                    closestDistance = distance
                                end
                            end
                        end
                    end
                end
                if closestEXPBook then
                    hrp.CFrame = closestEXPBook:GetPivot() + Vector3.new(0, 3, 0)
                    task.wait(0.5)
                    local proximityPrompt = closestEXPBook:FindFirstChild("ProximityPrompt")
                    if proximityPrompt and proximityPrompt.Enabled then
                        fireproximityprompt(proximityPrompt)
                    end
                end
            end
            task.wait(1)
        end
    end)
end)
